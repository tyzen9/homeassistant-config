# # *****************************************************************************
# # Servarr Package - This package is used to monitor a Servarr implementation
# #.  See: https://wiki.servarr.com
# #
# # Author: Steve Theisen (steve@tyzen9.com)
# #         www.tyzen9.com  -  github.com/tyzen9
# #
# # Usage:
# #   1. Place this package file in a config/packages folder
# #   2. Add this to your configuration.yaml:
# #      |homeassistant:
# #      |  packages: !include_dir_named packages
# #   3. Satisfy all dependant "external" entities (see note/examples below)
# #   4. Restart Home Assistant
# #   5. Drink a cold beverage
# #
# # Note: Packages require access to entities that are often configured outside
# # of this file.  Manytimes, these are from common integrations such as ESPHome,
# # Shelly, Zigbee, etc.  These dependant entities are called out in each package
# # declaration below.
# ##
# # *****************************************************************************

# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # RESTful SENSORS
# #  - These are reloaded using the "REST ENTITIES AND NOTIFY SERVICES" option
# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# rest:
#   # ---------------------------------------------------------------------------
#   # These RESTful sensors make API calls to the services needed to support
#   # my servarr implementation
#   #
#   # Dependencies:
#   #   - secrets.yaml
#   # ---------------------------------------------------------------------------
#   - resource: !secret sonarr_api_endpoint_health
#     headers:
#       X-Api-Key: !secret sonarr_api_key
#     scan_interval: 600 # seconds
#     sensor:
#       - name: Servarr - Sonarr Error Count
#         unique_id: servarr_sonarr_error_count
#         # The value will be 0 when there are no issues, a number greater than zero
#         # represents the number of issues with this service
#         value_template: "{{ value_json|length }}"

#   - resource: !secret radarr_api_endpoint_health
#     headers:
#       X-Api-Key: !secret radarr_api_key
#     scan_interval: 600 # seconds
#     sensor:
#       - name: Servarr - Radarr Error Count
#         unique_id: servarr_radarr_error_count
#         # The value will be 0 when there are no issues, a number greater than zero
#         # represents the number of issues with this service
#         value_template: "{{ value_json|length }}"

#   - resource: !secret prowlarr_api_endpoint_health
#     headers:
#       X-Api-Key: !secret prowlarr_api_key
#     scan_interval: 600 # seconds
#     sensor:
#       - name: Servarr - Prowlarr Error Count
#         unique_id: servarr_prowlarr_error_count
#         # The value will be 0 when there are no issues, a number greater than zero
#         # represents the number of issues with this service
#         value_template: "{{ value_json|length }}"

#   - resource: !secret qbittorrent_api_endpoint_health
#     scan_interval: 600 # seconds
#     sensor:
#       - name: Servarr - Qbittorrent Status
#         unique_id: servarr_qbittorrent_status
#         # Values include "connected", "firewalled" "disconnected"
#         value_template: "{{ value_json.connection_status }}"

# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # SENSORS
# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# template:
#   # ---------------------------------------------------------------------------
#   # This template sensor is triggered anytime a servarr monitoring sensor
#   #   changes value.  Then the values are evaluated to determine is there is a
#   #   Servarr connection issue.
#   #
#   # Dependencies: (None)
#   # ---------------------------------------------------------------------------
#   - trigger:
#       # If there is a long lasting sonarr error, or the error clears
#       - platform: numeric_state
#         entity_id: sensor.servarr_sonarr_error_count
#         above: 0
#         for:
#           minutes: 30
#       - platform: state
#         entity_id: sensor.servarr_sonarr_error_count
#         to: "unavailable"
#         for:
#           minutes: 30
#       - platform: numeric_state
#         entity_id: sensor.servarr_sonarr_error_count
#         below: 1
#       # If there is a long lasting radarr error, or the error clears
#       - platform: numeric_state
#         entity_id: sensor.servarr_radarr_error_count
#         above: 0
#         for:
#           minutes: 30
#       - platform: state
#         entity_id: sensor.servarr_radarr_error_count
#         to: "unavailable"
#         for:
#           minutes: 30
#       - platform: numeric_state
#         entity_id: sensor.servarr_radarr_error_count
#         below: 1
#         # If there is a long lasting prowlarr error, or the error clears
#       - platform: numeric_state
#         entity_id: sensor.servarr_prowlarr_error_count
#         above: 0
#         for:
#           minutes: 30
#       - platform: state
#         entity_id: sensor.servarr_prowlarr_error_count
#         to: "unavailable"
#         for:
#           minutes: 30
#       - platform: numeric_state
#         entity_id: sensor.servarr_prowlarr_error_count
#         below: 1
#         # If the qbittorrent sensor is not "connected" or "firewalled", or when
#         # the connection restores
#       - platform: state
#         entity_id: sensor.servarr_qbittorrent_status
#         not_to:
#           - "connected"
#           - "firewalled"
#         for:
#           minutes: 30
#       - platform: state
#         entity_id: sensor.servarr_qbittorrent_status
#         to:
#           - "connected"
#           - "firewalled"
#     binary_sensor:
#       - name: "Servarr - Connection Issue"
#         unique_id: servarr_connection_issue
#         # The if block will catch invalid sensor values before attempting to make
#         # the conversion to an integer
#         state: >
#           {% if states('sensor.servarr_sonarr_error_count') == "unavailable"
#                 or states('sensor.servarr_radarr_error_count') == "unavailable"
#                 or states('sensor.servarr_prowlarr_error_count') == "unavailable" %}
#             true
#           {% else %}
#             {{ states('sensor.servarr_sonarr_error_count')|int > 0
#                 or states('sensor.servarr_radarr_error_count')|int > 0
#                 or states('sensor.servarr_prowlarr_error_count')|int > 0
#                 or states('sensor.servarr_qbittorrent_status') != 'connected' }}
#           {% endif %}

# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # AUTOMATIONS
# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# automation:
#   # ---------------------------------------------------------------------------
#   # When there is a Servarr issue or an issue is cleared, send the appropriate
#   #   critical alerting message
#   #
#   # Dependencies:
#   #  - script.ha_mobile_notification (YAML ha_mobile_pkg.yaml)
#   # ---------------------------------------------------------------------------
#   - alias: Servarr - Connection Issue Notification
#     id: servarr_connection_issue_notification
#     description: "Send a notification when a Servarr connectivity issue state change happens"
#     mode: single
#     max_exceeded: silent
#     # When the connection issue sensor changes state
#     trigger:
#       - platform: state
#         entity_id: binary_sensor.servarr_connection_issue
#     action:
#       - if:
#           # If issue is cleared
#           - condition: state
#             entity_id: binary_sensor.servarr_connection_issue
#             state: "off"
#         then:
#           - action: script.ha_mobile_notification
#             data:
#               title: "üè¥‚Äç‚ò†Ô∏è Black Pearl OK"
#               message: "The Black Pearl sails again..."
#               priority: normal
#               presence: either
#               only_house_awake: false
#               target:
#                 - person_1
#       - if:
#           # If issues lasts the designated amount of time
#           - condition: state
#             entity_id: binary_sensor.servarr_connection_issue
#             state: "on"
#         then:
#           # Send a notifications
#           - action: script.ha_mobile_notification
#             data:
#               title: "üö® Black Pearl Error"
#               message: "There is an error/warning for a Servarr service"
#               priority: normal
#               presence: either
#               only_house_awake: false
#               target:
#                 - person_1
