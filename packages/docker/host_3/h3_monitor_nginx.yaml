# *****************************************************************************
# Nginx Proxy Manager Package
#
# Author: Steve Theisen (steve@tyzen9.com)
#         www.tyzen9.com - github.com/tyzen9
#
# Usage:
#   1. Place this package file in a config/packages folder
#   2. Add this to your configuration.yaml:
#      |homeassistant:
#      |  packages: !include_dir_named packages
#   3. Satisfy all dependant "external" entities (see note/examples below)
#   4. Restart Home Assistant
#   5. Drink a cold beverage
#
# Note: Packages require access to entities that are often configured outside
# of this file.  Manytimes, these are from common integrations such as ESPHome,
# Shelly, Zigbee, etc.  These dependant entities are called out in each package
# declaration below.
#
# Some Examples:
#   - ESPHome: https://www.home-assistant.io/integrations/esphome/
#
# *****************************************************************************

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RESTful Sensors
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sensor:
  # ---------------------------------------------------------------------------
  # This rest call retrieves JSON associated to this container from socket-proxy 
  # and parses the desired json attributes.
  # Hint: post the url into a browser or postman to review the provided JSON
  #
  # Dependencies:
  #  - socket-proxy (see https://github.com/tyzen9/docker-insight)
  #  - secrets.yaml - used to store host names, etc.
  #  - secret_sensor_pkg.yaml - used to convert secret date to sensors 
  #       sensor.secret_host_1_socketproxy_url
  #
  # ---------------------------------------------------------------------------
  - platform: rest
    name: "Host 3 - Nginx Proxy Manager - Current Digest"
    unique_id: "host_3_nginx_proxy_manager_current_digest"
    resource_template: "http://{{ states('sensor.secret_host_3_hostname') }}:2375/images/{{ state_attr('sensor.host_3_nginx_proxy_manager', 'image') }}/json"
    scan_interval: 7200
    value_template: "{{ value_json.RepoDigests[0].split('@')[1] }}"
    json_attributes_path: "$.Config.Labels"
    json_attributes:
      - org.opencontainers.image.version
    # Do not fire until the image name is evaluated (contains a '/' character)
    availability: >
      {{ state_attr('sensor.host_3_nginx_proxy_manager', 'image') is string and '/' in state_attr('sensor.host_3_nginx_proxy_manager', 'image') }}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Template Sensors
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
template:
  # ---------------------------------------------------------------------------
  # This sensor will update its state to the latest available repo digest ID
  # for this image when Diun sends an update FOR this image.
  #
  # ⚠️ This sensor will reset on restart (see the trigger sensor below)
  # ---------------------------------------------------------------------------
  - sensor:
    - name: "Host 3 - Nginx Proxy Manager - Digest Update"
      unique_id: "host_3_nginx_proxy_manager_digest_update"
      icon: mdi:barcode
      # If Diun pushes an update for THIS image, then store the new digest ID
      state: >
        {% from 'macros.jinja' import get_image_digest %}
        {{ get_image_digest('sensor.host_3_diun_update_handler', state_attr('sensor.host_3_nginx_proxy_manager', 'image')) }}

  # ---------------------------------------------------------------------------  #
  # This TRIGGERED sensor watches for digest updates and stores the new digest ID
  # in a way that will survive home assistant restarts
  # ---------------------------------------------------------------------------  #
  - trigger:
      - trigger: state
        entity_id: sensor.host_3_nginx_proxy_manager_digest_update
    sensor:
      - name: "Host 3 - Nginx Proxy Manager - Latest Digest"
        unique_id: "host_3_nginx_proxy_manager_latest_digest"
        state: "{{ states('sensor.host_3_nginx_proxy_manager_digest_update') }}"

  # ---------------------------------------------------------------------------
  # This sensor determines the update status of this container/image and builds
  # a list of attributes useful for displaying on the dashboard
  # ---------------------------------------------------------------------------
  - sensor:
      - name: "Host 3 - Nginx Proxy Manager - Update Summary"
        unique_id: "host_3_nginx_proxy_manager_update_summary"
        state: >
          {% from 'macros.jinja' import is_update_available %}
          {{ is_update_available(states('sensor.host_3_nginx_proxy_manager_current_digest'), states('sensor.host_3_nginx_proxy_manager_latest_digest')) }}
        attributes:
          app_name: >
            {{ state_attr('sensor.host_3_nginx_proxy_manager', 'friendly_name') }}
          version: >
            {{ state_attr('sensor.host_3_nginx_proxy_manager_current_digest', 'org.opencontainers.image.version') 
                or state_attr('sensor.host_3_nginx_proxy_manager', 'image').split(':')[-1] + '*'  
                or 'unknown' }}
          update_available: >
            {{ this.state }}
          container_state: >
            {{ states('sensor.host_3_nginx_proxy_manager') or 'unknown'  }}
          status: >
            {{ state_attr('sensor.host_3_nginx_proxy_manager', 'status') }}
          health: >
            {{ state_attr('sensor.host_3_nginx_proxy_manager', 'health') }}
          memory: >
            {{ state_attr('sensor.host_3_nginx_proxy_manager', 'memory') }}
          cpu: >
            {{ state_attr('sensor.host_3_nginx_proxy_manager', '1cpu_percentage') }}
          current_digest: >
            {{ states('sensor.host_3_nginx_proxy_manager_current_digest') or 'unknown'  }}
          latest_digest: >
            {{ states('sensor.host_3_nginx_proxy_manager_latest_digest') or 'unknown'  }}
          release_notes: >
            {{ states('input_text.nginx_proxy_manager_release_notes_url') or 'unknown'  }}
          host: > 
            {{ states('sensor.secret_host_3_hostname') or 'unknown'  }}
        icon: >
          {{ 'mdi:arrow-up-circle' if this.state == 'yes' else ('mdi:help-circle' if this.state == 'unknown' else 'mdi:check-circle') }}


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AUTOMATIONS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
automation:
  # ---------------------------------------------------------------------------
  # Generate notification(s) when an update for this container is available
  # ---------------------------------------------------------------------------
  - alias: "Host 3 - Nginx Proxy Manager - Update Notification"
    id: host_3_nginx_proxy_manager_update_notification
    description: "Create a dashboard notifications when this container is ready for an update"
    mode: single
    trigger:
      platform: state
      entity_id: sensor.host_3_nginx_proxy_manager_update_summary
      to: 'yes'
    action:
      # Create a dashboard notification
      - service: persistent_notification.create
        data:
          title: "Nginx Proxy Manager Update Available"
          message: >
            A new version of Nginx Proxy Manager is available (via Docker/Portainer)
          notification_id: host_3_nginx_proxy_manager_update_persistant_notification

  # ---------------------------------------------------------------------------
  # Clear notification(s) when this container has been updated
  # ---------------------------------------------------------------------------
  - alias: "Host 3 - Nginx Proxy Manager - Clear Update Notification"
    id: host_3_nginx_proxy_manager_clear_update_notification
    description: "Clear the dashboard notification when this container is updated"
    mode: single
    trigger:
      platform: state
      entity_id: sensor.host_3_nginx_proxy_manager_update_summary
      to: 'no'
    action:
      - service: persistent_notification.dismiss
        data:
          notification_id: host_3_nginx_proxy_manager_update_persistant_notification
